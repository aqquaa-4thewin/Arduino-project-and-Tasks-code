// Pin definitions
const int motorIn1 = 2;     // Motor input 1
const int motorIn2 = 4;     // Motor input 2
const int motorEnable = 3;  // Motor enable pin
const int joystickX = A0;   // Joystick X-axis pin
const int joystickY = A1;   // Joystick Y-axis pin
const int encoderC1 = 5;    // Encoder Channel 1
const int encoderC2 = 6;    // Encoder Channel 2

// Variables for encoder tracking
volatile int encoderTicks = 0; // Count of encoder ticks
int lastEncoderStateC1 = LOW;  // Previous state of C1
unsigned long lastPrintTime = 0; // Last time encoder speed was printed

void setup() {
  // Set motor pins as outputs
  pinMode(motorIn1, OUTPUT);
  pinMode(motorIn2, OUTPUT);
  pinMode(motorEnable, OUTPUT);

  // Set encoder pins as inputs
  pinMode(encoderC1, INPUT);
  pinMode(encoderC2, INPUT);

  // Initialize Serial communication
  Serial.begin(9600);

  // Attach interrupt for encoder
  attachInterrupt(digitalPinToInterrupt(encoderC1), encoderISR, CHANGE);

  // Start with the motor off
  digitalWrite(motorIn1, LOW);
  digitalWrite(motorIn2, LOW);
  Serial.println("Motor is stopped.");
}

void loop() {
  // Read joystick positions
  int xValue = analogRead(joystickX); // Read X-axis value
  int yValue = analogRead(joystickY); // Read Y-axis value

  // Map joystick Y-axis to motor speed and direction
  int motorSpeed = map(abs(yValue - 512), 0, 512, 0, 255); // Map to PWM range
  motorSpeed = constrain(motorSpeed, 0, 255);              // Ensure valid PWM range

  Serial.print("Joystick X: ");
  Serial.print(xValue);
  Serial.print(" | Joystick Y: ");
  Serial.println(yValue);

  // Determine motor direction based on Y-axis
  if (yValue > 768) { // Forward
    digitalWrite(motorIn1, HIGH);
    digitalWrite(motorIn2, LOW);
    analogWrite(motorEnable, motorSpeed); // Enable motor with speed
    Serial.println("Motor spinning forward.");
  } else if (yValue < 256) { // Backward
    digitalWrite(motorIn1, LOW);
    digitalWrite(motorIn2, HIGH);
    analogWrite(motorEnable, motorSpeed); // Enable motor with speed
    Serial.println("Motor spinning backward.");
  } else { // Near midpoint: stop
    digitalWrite(motorIn1, LOW);
    digitalWrite(motorIn2, LOW);
    digitalWrite(motorEnable, LOW); // Disable motor
    Serial.println("Motor is stopped.");
  }

  // Print encoder ticks and calculate speed every second
  if (millis() - lastPrintTime >= 1000) {
    Serial.print("Encoder ticks: ");
    Serial.println(encoderTicks);
    encoderTicks = 0; // Reset tick count for next second
    lastPrintTime = millis();
  }

  delay(100); // Short delay for stability
}

// Interrupt Service Routine (ISR) for encoder
void encoderISR() {
  int c1State = digitalRead(encoderC1);
  int c2State = digitalRead(encoderC2);

  // Determine direction based on C1 and C2 states
  if (c1State != lastEncoderStateC1) {
    if (c2State != c1State) {
      encoderTicks++; // Forward direction
    } else {
      encoderTicks--; // Backward direction
    }
    lastEncoderStateC1 = c1State;
  }
}